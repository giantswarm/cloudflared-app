{{- $dot := . }}
{{- $Values := .Values }}
{{- range default (until 2) .Values.useExistingTunnels.tunnelIDs }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/name: {{ template "name" (dict "dot" $dot "thisIndex" . ) }}
    {{- if $Values.useExistingTunnels.enabled }}
    app.kubernetes.io/tunnelID: {{ . }}
    {{- end }}
    {{- include "labels.common" $dot | nindent 4 }}
  name: {{ template "name" (dict "dot" $dot "thisIndex" . ) }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ template "name" (dict "dot" $dot "thisIndex" . ) }}
      {{- include "labels.selector" $dot | nindent 6 }}
  strategy: {}
  template:
    metadata:
      creationTimestamp: null
      labels:
        app.kubernetes.io/name: {{ template "name" (dict "dot" $dot "thisIndex" . ) }}
        {{- if $Values.useExistingTunnels.enabled }}
        app.kubernetes.io/tunnelID: {{ . }}
        {{- end }}
        {{- include "labels.selector" $dot | nindent 8 }}
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app.kubernetes.io/instance
                operator: In
                values:
                - "{{ $dot.Chart.Name }}-{{ $dot.Release.Name }}"
            topologyKey: "kubernetes.io/hostname"
      serviceAccountName: "{{ $dot.Chart.Name }}-{{ $dot.Release.Name }}"
      {{- if not $Values.useExistingTunnels.enabled }}
      initContainers:
      - name: create-argo-tunnel
        image: {{ $Values.initImage.registry }}/{{ $Values.initImage.name }}:{{ $Values.initImage.tag }}
        imagePullPolicy: {{ $Values.initImage.pullPolicy }}
        resources:
          requests:
            memory: "100Mi"
            cpu: "100m"
          limits:
            memory: "100Mi"
            cpu: "100m"
        {{- include "create-argo-tunnel-command" . | nindent 8 }}
        env:
          - name: TUNNEL_NAME
            value: "cloudflared-{{ $dot.Release.Name }}-{{ . }}"
          {{- include "final.envs" (dict "dot" $dot "thisIndex" . ) | nindent 10 }}
        volumeMounts:
          - name: credentials
            mountPath: "/credentials"
          - name: config
            mountPath: "/etc/cloudflared"
      {{- end }}
      containers:
      - image: {{ $Values.image.registry }}/{{ $Values.image.name }}:{{ $Values.image.tag }}
        name: cloudflared
        imagePullPolicy: {{ $Values.image.pullPolicy }}
        resources:
          {{ toYaml $Values.resources | indent 10 }}
        env:
          - name: TUNNEL_METRICS
            value: "0.0.0.0:42617"
          {{- include "final.envs" (dict "dot" $dot "thisIndex" . ) | nindent 10 }}
        args:
        - tunnel
        - '--no-autoupdate'
        - run
        {{- if $Values.useExistingTunnels.enabled }}
        - {{ . }}
        {{- else }}
        - cloudflared-{{ $dot.Release.Name }}-{{ . }}
        {{- end }}
        resources: {}
        volumeMounts:
          - name: config
            mountPath: "/etc/cloudflared"
          - name: credentials
            mountPath: "/credentials"
        livenessProbe:
          httpGet:
            path: /healthcheck
            port: 42617
            scheme: HTTP
        readinessProbe:
          httpGet:
            path: /ready
            port: 42617
            scheme: HTTP
        startupProbe:
          httpGet:
            path: /ready
            port: 42617
            scheme: HTTP
          failureThreshold: 60
          periodSeconds: 10
      securityContext:
        runAsUser: 1000
        readOnlyRootFilesystem: true
      volumes:
        - name: config
          configMap:
            name: "cloudflared-{{ $.Release.Name }}"
        - name: credentials
          {{- if $Values.useExistingTunnels.enabled }}
          secret:
            secretName: "{{ $Values.useExistingTunnels.credentialsSecretName }}"
          {{- else }}
          emptyDir: {}
          {{- end }}
...
{{- end }}
